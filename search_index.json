[
["index.html", "woof: WooorkFlooows for Bioinformatics Section 1 Introduction Installation", " woof: WooorkFlooows for Bioinformatics Peter Diakumis Fri 2019-Nov-29 Section 1 Introduction woof is a Python application for running bioinformatic workflows with Cromwell and WDL Installation Step 1: Clone woof repo git clone https://github.com/umccr/woof Step 2: Create conda environment wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh bash miniconda.sh conda update -n base -c defaults conda conda env create -f woof/env/woof.yaml "],
["compare-bcbioumccrise-runs.html", "Section 2 Compare bcbio/umccrise runs 2.1 Running on Raijin/Gadi 2.2 Multi-Sample Mode 2.3 Diagram", " Section 2 Compare bcbio/umccrise runs 2.1 Running on Raijin/Gadi Step 1: Grab an interactive node Most memory is for bcftools isec qsub -I -q normalbw -l ncpus=28,walltime=02:00:00,mem=80gb Step 2: Create woof run environment source /g/data3/gx8/extras/woof/load_woof.sh Step 3: Run woof compare Supports only SNVs/INDELs for now. # compare bcbio runs woof compare --sample sample_label path/to/run1/final path/to/run2/final # compare umccrise runs woof compare --sample sample_label path/to/run1/umccrised/sample path/to/run2/umccrised/sample The above will create the following directory structure (example): |-- final | |-- 2016.249.17.MH.P033 | | |-- bcftools_isec | | |-- vcf_counts | | |-- vcf_eval | | `-- vcf_pass | `-- CUP-Pairs8 | |-- bcftools_isec | |-- vcf_counts | |-- vcf_eval | `-- vcf_pass `-- work |-- 2016.249.17.MH.P033 | |-- cromwell-executions | |-- cromwell-workflow-logs | |-- cromwell_config.conf | |-- cromwell_inputs.json | |-- cromwell_log.log | |-- cromwell_meta.json | |-- cromwell_opts.json | |-- cromwell_samples.tsv | |-- persist | `-- wdl `-- CUP-Pairs8 |-- cromwell-executions |-- cromwell-workflow-logs |-- cromwell_config.conf |-- cromwell_inputs.json |-- cromwell_log.log |-- cromwell_meta.json |-- cromwell_opts.json |-- cromwell_samples.tsv |-- persist `-- wdl The final evaluation results are in final/&lt;sample&gt;/vcf_eval/&lt;vcf_type&gt;/&lt;ALL-or-PASS&gt;/eval_stats.tsv Step 4: Run woof report woof report -w path/to/woof/final --r1 &lt;run1_label&gt; --r2 &lt;run2_label&gt; 2.2 Multi-Sample Mode If you want to run woof compare on multiple samples (say, A &amp; B), you can hack it in the following (relatively) simple way: woof compare --justprep path/to/run1/A/final path/to/run2/A/final -s SAMPLE_A -o woof woof compare --justprep path/to/run1/B/final path/to/run2/B/final -s SAMPLE_B -o woof Each of the above runs prints out a cromwell command, and ‘just prepares’ a directory structure like the following: woof ├── final/ # empty └── work ├── SAMPLE_A │ ├── cromwell_config.conf │ ├── cromwell_inputs.json │ ├── cromwell_opts.json │ ├── cromwell_samples.tsv │ └── wdl │ ├── compare.wdl │ └── tasks/[...] └── SAMPLE_B ├── cromwell_config.conf ├── cromwell_inputs.json ├── cromwell_opts.json ├── cromwell_samples.tsv └── wdl ├── compare.wdl └── tasks/[...] The cromwell_samples.tsv file contains rows with the sample name (e.g. SAMPLE_A), VCF name (e.g. ensemble), and paths to VCF1 and VCF2. You need to simply concatenate those files for each sample you want into one, then run the Cromwell command: cd woof/final/work/SAMPLE_A cat ../SAMPLE_B/cromwell_samples.tsv &gt;&gt; cromwell_samples.tsv cromwell -Xms1g -Xmx3g run -Dconfig.file=cromwell_config.conf \\ -DLOG_LEVEL=ERROR -DLOG_LEVEL=WARN \\ --metadata-output cromwell_meta.json \\ --options cromwell_opts.json \\ --inputs cromwell_inputs.json \\ wdl/compare.wdl 2&gt;&amp;1 | tee -a cromwell_log.log That would fill up the final directory shown in the above file tree. 2.3 Diagram "],
["validate-ngs-data.html", "Section 3 Validate NGS data 3.1 Step 1 3.2 Step 2 3.3 Output", " Section 3 Validate NGS data 3.1 Step 1 Use woofr::validation_outputs to generate a TSV file with the following columns: col1 - type of file VCF BAM FASTQ Other col2 - path to file 3.2 Step 2 Now we can iterate through each row of the TSV according to its type: VCF: head vcf-validator BAM: samtools quickcheck GATK ValidateSamFile link1, link2 UMich BamUtil validate FASTQ: fqtools validate 3.3 Output woof-validation1/final |--- vcf/ |--- tool_1/ |--- results_fileA.txt |--- results_fileB.txt |--- tool_2/ |--- results_fileA.txt |--- results_fileB.txt |--- bam/ |--- tool_1/ |--- results_fileC.txt |--- results_fileD.txt |--- tool_2/ |--- results_fileC.txt |--- results_fileD.txt |--- fastq/ |--- tool_1/ |--- results_fileE.txt |--- results_fileF.txt |--- tool_2/ |--- results_fileE.txt |--- results_fileF.txt |--- md5/ |--- vcf/ |--- md5_fileA.txt |--- md5_fileB.txt |--- bam/ |--- md5_fileC.txt |--- md5_fileD.txt |--- fastq/ |--- md5_fileE.txt |--- md5_fileF.txt |--- other/ |--- md5_fileG.txt |--- md5_fileH.txt "]
]
